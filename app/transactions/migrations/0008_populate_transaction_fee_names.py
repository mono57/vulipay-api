# Generated by Django 5.1.6 on 2025-05-11 04:12

from django.db import migrations


def populate_transaction_fee_names(apps, schema_editor):
    """
    Populate the name field for existing TransactionFee records.
    Uses a combination of country, payment method type, transaction type, and fee info to create descriptive names.
    """
    TransactionFee = apps.get_model("transactions", "TransactionFee")
    PaymentMethodType = apps.get_model("transactions", "PaymentMethodType")
    AvailableCountry = apps.get_model("accounts", "AvailableCountry")

    for fee in TransactionFee.objects.all():
        # Get country name
        country_name = "Global"
        if fee.country_id:
            try:
                country = AvailableCountry.objects.get(id=fee.country_id)
                country_name = country.name
            except AvailableCountry.DoesNotExist:
                pass

        # Get payment method type name
        payment_type = "All"
        if fee.payment_method_type_id:
            try:
                pmt = PaymentMethodType.objects.get(id=fee.payment_method_type_id)
                payment_type = pmt.name
            except PaymentMethodType.DoesNotExist:
                pass

        # Get transaction type display name from fee.transaction_type
        transaction_type_mapping = {
            "P2P": "Peer to Peer",
            "MP": "Merchant Payment",
            "CO": "Cash Out",
            "CI": "Cash In",
        }
        transaction_type = transaction_type_mapping.get(
            fee.transaction_type, fee.transaction_type
        )

        # Determine fee info (fixed or percentage)
        if fee.fee_priority == "fixed":
            fee_info = f"Fixed {fee.fixed_fee}"
        else:
            fee_info = f"{fee.percentage_fee}%"

        # Create the name
        fee.name = f"{country_name} {transaction_type} {payment_type} Fee ({fee_info})"
        fee.save()


def reverse_populate(apps, schema_editor):
    """
    No need to reverse this operation since we're just setting values.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ("transactions", "0007_transactionfee_description_transactionfee_name"),
    ]

    operations = [
        migrations.RunPython(populate_transaction_fee_names, reverse_populate),
    ]
