# Generated by Django 5.1.6 on 2025-03-29 14:51

import app.core.utils.fields
import app.core.utils.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethodType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('name', app.core.utils.fields.AppCharField(default=None, max_length=255, verbose_name='Name')),
                ('code', app.core.utils.fields.AppCharField(default=None, max_length=255, verbose_name='Code')),
                ('cash_in_transaction_fee', models.FloatField(null=True, verbose_name='Cash In Transaction Fee')),
                ('cash_out_transaction_fee', models.FloatField(null=True, verbose_name='Cash Out Transaction Fee')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.availablecountry')),
            ],
            options={
                'verbose_name': 'Payment Method Type',
                'verbose_name_plural': 'Payment Method Types',
            },
            bases=(models.Model, app.core.utils.models.ExtraModel),
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(choices=[('card', 'Card'), ('mobile_money', 'Mobile Money')], help_text='Type of payment method (card or mobile money)', max_length=50)),
                ('default_method', models.BooleanField(default=False, help_text='Whether this is the default payment method for the user')),
                ('cardholder_name', models.CharField(blank=True, help_text='Name of the cardholder (for card payment methods)', max_length=255, null=True)),
                ('masked_card_number', models.CharField(blank=True, help_text='Masked card number, e.g., **** **** **** 1234 (for card payment methods)', max_length=19, null=True)),
                ('expiry_date', models.CharField(blank=True, help_text='Card expiry date in MM/YYYY format (for card payment methods)', max_length=7, null=True)),
                ('cvv_hash', models.TextField(blank=True, help_text='Hashed CVV (not plaintext) for card payment methods', null=True)),
                ('billing_address', models.TextField(blank=True, help_text='Billing address associated with the card (for card payment methods)', null=True)),
                ('provider', models.CharField(blank=True, help_text='Mobile money provider, e.g., M-Pesa, MTN Mobile Money (for mobile money payment methods)', max_length=100, null=True)),
                ('mobile_number', models.CharField(blank=True, help_text='Mobile number associated with the mobile money account (for mobile money payment methods)', max_length=20, null=True)),
                ('account_name', models.CharField(blank=True, help_text='Name associated with the mobile money account (for mobile money payment methods)', max_length=255, null=True)),
                ('user', models.ForeignKey(help_text='User who owns this payment method', on_delete=django.db.models.deletion.CASCADE, related_name='payment_methods', to=settings.AUTH_USER_MODEL)),
                ('payment_method_type', models.ForeignKey(blank=True, help_text='The specific type of payment method (e.g., Visa, Mastercard, MTN Mobile Money)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_methods', to='transactions.paymentmethodtype')),
            ],
            options={
                'verbose_name': 'payment method',
                'verbose_name_plural': 'payment methods',
            },
            bases=(models.Model, app.core.utils.models.ExtraModel),
        ),
        migrations.CreateModel(
            name='PlatformWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('balance', models.DecimalField(decimal_places=2, default=0, help_text='Current wallet balance', max_digits=12)),
                ('currency', app.core.utils.fields.AppCharField(blank=True, help_text='Currency for this wallet (e.g., USD, EUR, XAF)', max_length=50, null=True, verbose_name='Currency')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.availablecountry')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, app.core.utils.models.ExtraModel),
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.DecimalField(decimal_places=2, default=0, help_text='Current wallet balance', max_digits=12)),
                ('wallet_type', app.core.utils.fields.AppCharField(choices=[('MAIN', 'Main Wallet'), ('BUSINESS', 'Business Wallet')], default=None, help_text='Type of wallet (Main or Business)', max_length=10, verbose_name='Wallet Type')),
                ('currency', app.core.utils.fields.AppCharField(blank=True, help_text='Currency for this wallet (e.g., USD, EUR, XAF)', max_length=50, null=True, verbose_name='Currency')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this wallet is active')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wallets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Wallet',
                'verbose_name_plural': 'Wallets',
                'unique_together': {('user', 'wallet_type')},
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('reference', app.core.utils.fields.AppCharField(default=None, max_length=30, verbose_name='Reference')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('charged_amount', models.FloatField(null=True, verbose_name='Charged Amount')),
                ('calculated_fee', models.FloatField(null=True, verbose_name='Calculated Fee')),
                ('status', app.core.utils.fields.AppCharField(choices=[('INITIATED', 'Initiated'), ('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default=None, max_length=10, verbose_name='Status')),
                ('type', app.core.utils.fields.AppCharField(choices=[('P2P', 'Peer to Peer'), ('MP', 'Merchant Payment'), ('CO', 'Cash Out'), ('CI', 'Cash In')], default=None, max_length=4, verbose_name='Type')),
                ('notes', models.TextField(null=True, verbose_name='Notes')),
                ('payment_method', models.ForeignKey(help_text='Payment method used for the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='transactions.paymentmethod')),
                ('from_wallet', models.ForeignKey(help_text='Wallet that sent the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='outgoing_transactions', to='transactions.wallet')),
                ('to_wallet', models.ForeignKey(help_text='Wallet that received the transaction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incoming_transactions', to='transactions.wallet')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, app.core.utils.models.ExtraModel),
        ),
        migrations.CreateModel(
            name='TransactionFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('fixed_fee', models.FloatField(db_index=True, null=True)),
                ('percentage_fee', models.FloatField(db_index=True, null=True)),
                ('fee_priority', models.CharField(choices=[('fixed', 'Fixed Fee'), ('percentage', 'Percentage Fee'), ('both', 'Both')], default='percentage', max_length=20)),
                ('transaction_type', app.core.utils.fields.AppCharField(choices=[('P2P', 'Peer to Peer'), ('MP', 'Merchant Payment'), ('CO', 'Cash Out'), ('CI', 'Cash In')], db_index=True, default=None, max_length=10, verbose_name='Transaction Type')),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.availablecountry')),
                ('payment_method_type', models.ForeignKey(help_text='Payment method type associated with this fee', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transaction_fees', to='transactions.paymentmethodtype')),
            ],
            options={
                'verbose_name': 'Transaction Fee',
                'verbose_name_plural': 'Transaction Fees',
                'indexes': [models.Index(fields=['country', 'transaction_type', 'payment_method_type'], name='tx_fee_lookup_idx'), models.Index(fields=['transaction_type'], name='tx_fee_type_idx')],
                'unique_together': {('country', 'transaction_type', 'payment_method_type')},
            },
            bases=(models.Model, app.core.utils.models.ExtraModel),
        ),
    ]
